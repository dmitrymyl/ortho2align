{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"exc",
				"exception\tstatement"
			],
			[
				"pasr",
				"parse_blastn_results\tmodule"
			],
			[
				"feat",
				"feature_extraction_path\tstatement"
			],
			[
				"REFERENCE",
				"REFERENCE_FEATURES\tstatement"
			],
			[
				"refere",
				"reference_features"
			],
			[
				"re",
				"reference_alignment"
			],
			[
				"Arg",
				"ArgumentParser\tclass"
			],
			[
				"Argume",
				"ArgumentParser\tclass"
			],
			[
				"for",
				"formatter_class=\tparam"
			],
			[
				"subject",
				"subject_ortho_id"
			],
			[
				"matr",
				"matrix_filename\tstatement"
			],
			[
				"back",
				"background_filenames"
			],
			[
				"Exce",
				"ExceptionLogger"
			],
			[
				"ben",
				"benchmark_dirs"
			],
			[
				"out",
				"out_number"
			],
			[
				"non_",
				"non_ortho_found"
			],
			[
				"found_qe",
				"found_query_name"
			],
			[
				"real_subje",
				"real_subject_name_regex\tstatement"
			],
			[
				"found_que",
				"found_query_name_regex\tstatement"
			],
			[
				"query_nam",
				"query_name_regex\tstatement"
			],
			[
				"real",
				"real_subject_name_regex"
			],
			[
				"real_subject_",
				"real_subject_name_regex"
			],
			[
				"found_quer",
				"found_query_name_regex"
			],
			[
				"query_name",
				"query_name_regex"
			],
			[
				"query_anchors",
				"query_anchors_name_regex\tstatement"
			],
			[
				"query_an",
				"query_anchors_name_regex"
			],
			[
				"query_nae",
				"query_name_regex"
			],
			[
				"Inc",
				"IncorrectGtfAttrs\tclass"
			],
			[
				"query_e",
				"query_exceptions_filename"
			],
			[
				"query_ex",
				"query_exception_ranges\tstatement"
			],
			[
				"Base",
				"BaseGenomicRangesList"
			],
			[
				"query_exc",
				"query_exception_list"
			],
			[
				"query_excep",
				"query_exceptions_filename"
			],
			[
				"except",
				"exception\tstatement"
			],
			[
				"query_excp",
				"query_exception_ranges"
			],
			[
				"E",
				"ExceptionLogger\tclass"
			],
			[
				"Exc",
				"Exception"
			],
			[
				"excp",
				"exception"
			],
			[
				"Ex",
				"Exception\tclass"
			],
			[
				"exce",
				"except"
			],
			[
				"real_subject",
				"real_subject_genes"
			],
			[
				"BaseGen",
				"BaseGenomicRangesList\tclass"
			],
			[
				"query_una",
				"query_unalignable"
			],
			[
				"Genomic",
				"GenomicRangesList"
			],
			[
				"parse",
				"parse_annotation\tfunction"
			],
			[
				"Argum",
				"ArgumentParser\tclass"
			],
			[
				"found",
				"found_query_subject_map_filename\tstatement"
			],
			[
				"sequ",
				"SequencePath"
			],
			[
				"Seque",
				"SequencePath"
			],
			[
				"Sequen",
				"SequencePath"
			],
			[
				"Seq",
				"sequence_file"
			],
			[
				"Sequence",
				"sequences"
			],
			[
				"Sequ",
				"SequencePath"
			],
			[
				"is",
				"isinstance"
			],
			[
				"get_or",
				"get_orthodb_by_taxid\tfunction"
			],
			[
				"get_orthodb",
				"get_orthodb_by_taxid"
			],
			[
				"query",
				"query_unalignable_genes\tstatement"
			],
			[
				"query_prep",
				"query_prepared_genes\tstatement"
			],
			[
				"query_a",
				"query_anchors_filename"
			],
			[
				"liftover_",
				"liftover_chains_filename\tstatement"
			],
			[
				"query_p",
				"query_prepared_genes\tstatement"
			],
			[
				"Genomicranges",
				"GenomicRangesList\tclass"
			],
			[
				"Argumen",
				"ArgumentDefaultsHelpFormatter\tclass"
			],
			[
				"ab",
				"Attributes"
			],
			[
				"Inside",
				"InsideTheGapError\tclass"
			],
			[
				"par",
				"paritally_deleted\tstatement"
			],
			[
				"Par",
				"PartiallyDeletedInNewError\tclass"
			],
			[
				"allow",
				"allow_duplications\tparam"
			],
			[
				"relations_clas",
				"relations_class_name\tstatement"
			],
			[
				"ing",
				"integrate_box_1d\tfunction"
			],
			[
				"query_genome",
				"query_genome_filename\tstatement"
			],
			[
				"Geno",
				"GenomicRangesList\tclass"
			],
			[
				"program",
				"program_mode"
			],
			[
				"def",
				"defaultdict\tclass"
			],
			[
				"Quer",
				"QueryBed\tstatement"
			],
			[
				"Que",
				"QueryBed\tstatement"
			],
			[
				"De",
				"ArgumentDefaultsHelpFormatter\tclass"
			],
			[
				"form",
				"formatter_class\tparam"
			],
			[
				"quer",
				"query_genes"
			],
			[
				"Ge",
				"GenomicRangesList\tclass"
			],
			[
				"query_genes_fil",
				"query_genes_filename"
			],
			[
				"format",
				"formatter_class\tparam"
			],
			[
				"Argument",
				"ArgumentParser\tclass"
			],
			[
				"unne",
				"unnest_number_list\tfunction"
			],
			[
				"Genmoic",
				"GenomicException\tclass"
			],
			[
				"query_un",
				"query_unalignable_genes\tstatement"
			],
			[
				"unal",
				"unalignable_filename\tstatement"
			],
			[
				"seq",
				"sequence_file_path\tparam"
			],
			[
				"que",
				"query_unaligned\tstatement"
			],
			[
				"chrom",
				"chromsizes"
			],
			[
				"subject_genes_",
				"subject_genes_filetype\tstatement"
			],
			[
				"subje",
				"subject_genes"
			],
			[
				"ba",
				"background_filename\tstatement"
			],
			[
				"stats",
				"statistic\tstatement"
			],
			[
				"second_un",
				"second_unlinked_pairs_file\tstatement"
			],
			[
				"first_un",
				"first_unlinked_pairs_file\tstatement"
			],
			[
				"second_lost_pair",
				"second_lost_pairs_file\tstatement"
			],
			[
				"first_lost_",
				"first_lost_pairs_file\tstatement"
			],
			[
				"comm",
				"common_pairs_file\tstatement"
			],
			[
				"first",
				"first_taxid\tstatement"
			],
			[
				"second",
				"second_orthologs_file\tstatement"
			],
			[
				"firs",
				"first_orthologs_file\tstatement"
			],
			[
				"sec",
				"second_distances_file\tstatement"
			],
			[
				"con",
				"combinations\tclass"
			],
			[
				"align",
				"alignment\tstatement"
			],
			[
				"set_",
				"set_postfix\tfunction"
			],
			[
				"cmd",
				"cmd_point\tstatement"
			],
			[
				"ortho",
				"orthologs"
			],
			[
				"in",
				"inmessage\tparam"
			],
			[
				"subject_un",
				"subject_unaligned\tstatement"
			],
			[
				"outpu",
				"output_filename\tstatement"
			],
			[
				"hit",
				"hit_number"
			],
			[
				"Un",
				"UniProt"
			],
			[
				"NCBIg",
				"NCBIgid"
			],
			[
				"sequence_",
				"sequence_file_path"
			],
			[
				"inv",
				"inverse_approximate_collection\tfunction"
			],
			[
				"class",
				"classmethod\tclass"
			],
			[
				"get",
				"get_event_loop\tfunction"
			],
			[
				"as",
				"async_hello\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/dmitry/science/blastn_test/benchmark_blastn.py",
			"settings":
			{
				"buffer_size": 2298,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ortho2align/benchmark.py",
			"settings":
			{
				"buffer_size": 10024,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mark",
				"Markdown Preview: Save to HTML"
			],
			[
				"mar",
				"Markdown Preview: Preview in Browser"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"conda",
				"Conda: Activate Environment"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pacen",
				"Package Control: Enable Package"
			],
			[
				"Package Control: dis",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ena",
				"Package Control: Enable Package"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"latex che",
				"LaTeXTools: Check system"
			],
			[
				"latex",
				"LaTeXTools: Reset user settings to default"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"ayu",
				"ayu: Activate theme"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"Package Control: install ",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 244.0,
		"history":
		[
			"sublime.log_input(False)",
			"sublime.log_input(True)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align"
	],
	"file_history":
	[
		"/home/dmitry/science/blastn_test/benchmark_blastn.pbs",
		"/home/dmitry/mydir/prog/cpp/novice/chapter1/Ex1_01.cpp",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/genomicranges.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/cli_scripts.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/parsing.py",
		"/home/dmitry/science/blastn_test/benchmark_blastn.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/benchmark.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/alignment.py",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/README.md",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/scripts/catboost_predict.py",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/scripts/catboost_train.ipynb",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/predict.py",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/scripts/feature_extraction.py",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/scripts/filter_hmm.py",
		"/home/dmitry/sxfx/Misc/OMG/PROphiLE29/scripts/catboost_module.py",
		"/home/dmitry/sxfx/Misc/OMG/hmmering_script/hmmering.py",
		"/home/dmitry/sxfx/Misc/OMG/feature_extraction.py",
		"/home/dmitry/sxfx/Misc/OMG/src/generate_features.py",
		"/home/dmitry/sxfx/Misc/OMG/src/generate_positive_dataset.py",
		"/home/dmitry/science/ortho2align/make_expr_heatmap.pbs",
		"/home/dmitry/science/ortho2align/make_expr_heatmap.py",
		"/home/dmitry/science/ortho2align/lift_bedgraph.pbs",
		"/home/dmitry/science/ortho2align/lift_bedgraph.py",
		"/home/dmitry/science/ortho2align/calc_qvalues.py",
		"/home/dmitry/science/ortho2align/benchmark_orthologs_split.py",
		"/home/dmitry/science/ortho2align/benchmark_orthologs_split.pbs",
		"/home/dmitry/science/ortho2align/benchmark_orthologs.py",
		"/home/dmitry/science/ortho2align/build_orthologs.py",
		"/home/dmitry/science/ortho2align/get_best_orthologs.py",
		"/home/dmitry/science/ortho2align/best_orthologs.py",
		"/home/dmitry/science/ortho2align/create_get_best_orthologs_params.py",
		"/home/dmitry/science/ortho2align/get_best_orthologs.pbs",
		"/home/dmitry/science/ortho2align/benchmark_orthologs.pbs",
		"/home/dmitry/science/ortho2align/prepare_benchmark_orthologs.py",
		"/home/dmitry/science/ortho2align/get_alignments.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/liftover.py",
		"/home/dmitry/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/orthodb.py",
		"/home/dmitry/.config/sublime-text-3/Packages/User/Anaconda.sublime-settings",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/__init__.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/parallel.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/fitting.py",
		"/home/dmitry/science/ortho2align/create_build_orthologs_params.py",
		"/home/dmitry/sxfx/Science/arcRNAs/ortho2align/ortho2align/utils.py",
		"/home/dmitry/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/dmitry/mydir/bayes/bayes.md",
		"/home/dmitry/.config/sublime-text-3/Packages/User/LaTeXTools.sublime-settings",
		"/home/dmitry/sxfx/Science/arcRNAs/test_ortho2align/module_vars.py",
		"/home/dmitry/.config/sublime-text-3/Packages/Anaconda/Default (Linux).sublime-keymap",
		"/home/dmitry/.config/sublime-text-3/Packages/Anaconda/README.md",
		"/home/dmitry/sxfx/Exams/8_term/статистика/pystats.py",
		"/tmp/head02-00wlor/rule_distance_image.pbs",
		"/tmp/head02-kf6bra/draw_distance_image.py",
		"/tmp/head02-4dpywa/rule_distance_image.py",
		"/tmp/head02-og50l0/draw_distance_image.py",
		"/tmp/head02-p71l1r/get_ortho_pairs.py",
		"/tmp/head02-knzenn/rule_ortho_pairs.py",
		"/tmp/head02-_bttl7/run_ortho_pairs.pbs",
		"/home/dmitry/mydir/prog/cli_exp/subprocess_sleep.py",
		"/tmp/head02-2u2xp8/get_ortho_pairs.py",
		"/tmp/head02-3tm1cj/rule_ortho_pairs.py",
		"/tmp/head02-o0wlag/run_ortho_pairs.pbs",
		"/tmp/head02-eryph1/get_ortho_pairs.py",
		"/home/dmitry/mydir/prog/async_test/task1.py",
		"/home/dmitry/mydir/prog/async_test/task2.py",
		"/home/dmitry/mydir/prog/async_test/task2_ex.py",
		"/home/dmitry/mydir/prog/async_test/task3.py",
		"/home/dmitry/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/dmitry/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"def get_fasta",
			"temporary",
			"class genomicrangesalign",
			"class basegenomicrange",
			"class ",
			"subject_ortho_id",
			"calc_fra",
			"chromsizes",
			"unaligned",
			"zip(*",
			"def sf",
			"raise ExceptionLogger",
			"ExceptionLogger",
			"class exceptionlogger",
			"dataset",
			"input",
			"`dataset`",
			"liftover_lift",
			"import genomicrangeslist",
			"is_float",
			"float",
			"IncorrectGff",
			"IncorrectGtf",
			"numberize",
			"\\s{4}\\n",
			"except:",
			"class",
			"numberize",
			"TextIo",
			"class basegenomicrange",
			"class genomicrange",
			"def init_args",
			"def annotation_parser",
			"refine",
			"from .parallel",
			"transcript",
			"GenomicRangesTranscript",
			"Transcript",
			"transcript",
			"chain.",
			"chain ",
			"transcript",
			"Transcript",
			"fileformat",
			"filetype",
			".name",
			"name",
			"def sf",
			"fdr",
			"transcript",
			"subject_transcripts",
			"query_transcripts",
			"bg_genes",
			"func_to_apply",
			"value_extraction",
			"subject_chromsizes",
			"def get_fasta",
			"fasta",
			"get_fasta",
			"namedtuple",
			"self.chromsize",
			"liftover_short",
			"orthodb_short",
			"orthodb_long",
			"allow_dupl",
			"blocks",
			"number",
			"class",
			"namedtuple",
			"class genomicrangeslist",
			"def to_dict",
			"def __str__",
			"init_args(",
			"class genomicrangeslist",
			"def get_fasta",
			"Chromosome",
			"def from_dict",
			"def __repr__",
			"def get_fasta",
			"used_args = {",
			"'path': None",
			"def init_args",
			"super().__init__",
			"def from_dict",
			"in parser_dict",
			"def distance",
			"def init_",
			"class genomicrange",
			"class basegenomicrange",
			"def name",
			"class genomicrange:",
			"GenomicError",
			"def __repr",
			"class genomicrange",
			"def __eq",
			"def merge",
			"Returns",
			"def to_dict",
			"def from_dict",
			"def to_dict",
			"def from_dict",
			"def to_dict",
			"to_d",
			"def __repr__",
			"class genomicrange",
			"def from_dict",
			"class genomicrangeslist",
			"def ",
			"def from_dict",
			".distance",
			"def flank",
			"flank",
			"def ref",
			"Compare found orthologs against real orthologs and\n                                calculate several performance metrics.",
			"description",
			"import json",
			"to_bed",
			"['real']",
			"['found']",
			"misc",
			"granges",
			"grange",
			"grange_",
			"grange",
			"cdf",
			"def merge",
			"query_una",
			"def get_al"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"query_ortho_id",
			"dropped",
			"IncorrectGFF",
			"IncorrectGTF",
			"\\n",
			"",
			"except Exception:",
			"build",
			"chain",
			"alignemnt chain",
			"chain",
			"GenomicRangesAlignmentChain",
			"AlignmentChain",
			"chain",
			"alignment chain",
			"AlignmentChain",
			"fileformat",
			"ortholog",
			"subject_orthologs",
			"query_orthologs",
			"bg_ranges",
			"func",
			"extract",
			"liftover_lift",
			"anchor_short",
			"anchor_long",
			"GenomicException",
			"[real_relname]",
			"[found_relname]",
			"anchor"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/dmitry/science/blastn_test/benchmark_blastn.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2298,
						"regions":
						{
						},
						"selection":
						[
							[
								445,
								445
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ortho2align/benchmark.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10024,
						"regions":
						{
						},
						"selection":
						[
							[
								4066,
								4066
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2700.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.844270833333,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "ortho2align.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/mydir/prog/cpp/novice/cpp_novice.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 243.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
